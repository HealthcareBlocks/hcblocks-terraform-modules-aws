name: reusable/plan
on:
  workflow_call:
    inputs:
      moduleRootDirectory:
        description: "Defines root module directory"
        required: true
        type: string

      releaseType:
        description: "Defines github release type"
        required: true
        type: string

      artifactsRetentionDays:
        description: "How many days artifacts should be stored"
        required: false
        type: number
        default: 5

    secrets:
      githubToken:
        description: "GitHub Token value"
        required: true

jobs:
  plan:
    runs-on: ubuntu-latest
    name: "Module: ${{ inputs.moduleRootDirectory }}"
    steps:
      - name: Label PR with module name
        uses: actions/github-script@v7
        if: ${{ github.event_name == 'pull_request' }}
        id: label
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["${{ inputs.moduleRootDirectory }}"]
            })

      - name: Detect previous version number
        uses: actions/github-script@v7
        id: prev-version
        env:
          PACKAGE_NAME: "${{ inputs.moduleRootDirectory }}"
        with:
          script: |
            const { owner, repo } = context.repo;
            const query = `query($owner: String!, $repo: String!, $refPrefix: String!) {
              repository(owner: $owner, name: $repo) {
                refs(refPrefix: $refPrefix, first: 1, orderBy: {field: TAG_COMMIT_DATE, direction: DESC}) {
                  edges { node { name } }
                }
              }
            }`;
            const result = await github.graphql(query, { owner, repo,
              refPrefix: `refs/tags/${process.env.PACKAGE_NAME}/`,
            });
            const prevNode = result.repository.refs.edges[0];
            const prevVer = prevNode ? prevNode.node.name.substring(1) : '0.0.0';
            console.log('Found previous version', prevVer);
            return prevVer;
          result-encoding: string

      - name: Determine new version number
        uses: actions/github-script@v7
        id: new-version
        env:
          PREV_VERSION: "${{ steps.prev-version.outputs.result }}"
          RELEASE_TYPE: "${{ inputs.releaseType }}"
        with:
          script: |
            const { PREV_VERSION, RELEASE_TYPE } = process.env;
            console.log('Previous version was', PREV_VERSION);
            console.log('Release type is', RELEASE_TYPE);
            const numbers = PREV_VERSION.split('.');
            const numberIdx = ['major', 'minor', 'patch'].indexOf(RELEASE_TYPE);
            numbers[numberIdx] = parseInt(numbers[numberIdx]) + 1;
            for (let i = numberIdx + 1; i < numbers.length; i++) {
              numbers[i] = 0;
            }
            return numbers.join('.');
          result-encoding: string

      - name: Store version numbers
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          mkdir output
          echo 'v${{ steps.prev-version.outputs.result }}' > output/previous-version.txt
          echo 'v${{ steps.new-version.outputs.result }}' > output/new-version.txt

      - name: Extract changelog entry
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { data: prInfo } = await github.rest.pulls.get({
              owner, repo,
              pull_number: context.issue.number,
            });
            console.log('Found PR body:|');
            console.log(prInfo.body);
            const changelogEntry = ((prInfo.body
              .split(/^#+ ?/m)
              .find(x => x.startsWith('Changelog'))
              || '').split(/^```/m)[1] || '').trim();
            if (!changelogEntry)
              throw `'Changelog' section not found in PR body! Please add it back.`;
            if (changelogEntry.match(/^TODO:/m))
              throw `'Changelog' section needs proper text, instead of 'TODO'`;
            const { writeFile } = require('fs').promises;
            await writeFile('output/changelog.md', `
            * PR [#${ prInfo.number }](${ prInfo.html_url }) - ${ prInfo.title }
            \`\`\`
            ${changelogEntry}
            \`\`\`
            `.trimLeft(), { encoding: 'utf-8' })

      - name: Document example 'source' line
        run: |
          cat > output/documentation.md <<'EOF'
          # Module Location
          How to use this module:
          ```hcl
          module "${{ inputs.moduleRootDirectory }}" {
            source = "git::${{ github.server_url }}/${{ github.repository }}.git?ref=${{ inputs.moduleRootDirectory }}/v${{ steps.new-version.outputs.result }}"
            # also any inputs for the module (see below)
          }
          ```
          EOF

      - name: Install terraform docs
        run: |
          wget https://github.com/terraform-docs/terraform-docs/releases/download/v0.17.0/terraform-docs-v0.17.0-linux-amd64.tar.gz \
            --output-document - \
            --progress dot:mega \
          | tar -xvz

      - name: Clone repository for analysis
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          path: src

      - name: Render terraform docs
        run: |
          echo '# Module Attributes' >> output/documentation.md
          ./terraform-docs markdown table \
            --output-file "$(pwd)"/output/documentation.md \
            --sort-by required \
            'src/${{ inputs.moduleRootDirectory }}'

      - name: Bundle up Terraform module
        working-directory: src/${{ inputs.moduleRootDirectory }}
        run: zip -vr ../../output/terraform-module.zip *

      - name: Upload result artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "${{ inputs.moduleRootDirectory }}"
          path: output
          retention-days: ${{ inputs.artifactsRetentionDays }}
